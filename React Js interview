  - Error bondary 
 - authenticated and autharised differnce
 -provite routing example 

    JavaScript is a dynamic (or dynamically typed) language.
    Key Characteristics of Dynamic Typing in JavaScript:
    No Type Declarations: You do not need to declare variable types. Variables can hold any type of value and can change types at runtime.
    let value = 42;    // value is a number
    value = "hello";   // value is now a string
    Type Inference: The type of a variable is determined by the value it holds. The type can change as the variable is assigned new values.
    let message = "This is a string"; // JavaScript infers that message is a string
    message = 100;                    // JavaScript now infers that message is a number
    Runtime Type Checking: Type errors are often only caught during execution, not during the compilation phase (since there's no compilation step as in statically typed languages).

javascript
Copy code
function add(a, b) {
    return a + b;
}

console.log(add(5, 10));    // 15
console.log(add(5, "10"));  // "510"


❖ NPM(Node Package Manager) is used to manage the dependencies for your React project, including the React library itself.
1.What are the major features of ReactJS?

   ** The major features of ReactJS are as follows,
   - It uses VirtualDOM instead RealDOM considering that RealDOM manipulations are expensive.
   - Supports server-side rendering
   - Follows Unidirectional data flow or data binding
   - Uses reusable/composable UI components to develop the view

=> Cross-platform is the ability of software applications to operate on multiple operating systems (OS) or hardware platforms with little or no modification. 
2. Hooks are a feature that was introduced in React 16.8. They enable you to use state and other React features without having to write a class.
   They’re called Hooks because they allow you to “hook” into React features. 
   One example is the useState Hook, which allows you to add React state to function components.

   - With Hooks, you can extract stateful logic from a component so it can be tested independently and reused. 
     Hooks allow you to reuse stateful logic without changing your component hierarchy.
      This makes it easy to share Hooks among many components or with the community.

3. Props
    Props (short for properties) are used to pass data from a parent component to a child component. 
    They are read-only, meaning that a child component cannot modify the props it receives.
    Props allow components to be dynamic and reusable.

    Usage: To pass information from one component to another.
    Immutable: Once set, they cannot be changed by the child component
4.State
    State is used to manage data that changes over time within a component. 
    Unlike props, a component can update its own state. 
    When the state changes, the component re-renders to reflect those changes.

    Usage: To manage dynamic data within a component.
    Mutable: Can be changed using the setState method in class components or the useState hook in functional components.

5. Class components in React are a way to define components using JavaScript classes. 
    They have more features compared to functional components, such as the ability to manage local state and lifecycle methods. 
    Here's a simple explanation and example.  

    class Greeting extends Component {
          constructor(props) {
                  super(props);
                  this.state = { name: 'World' }; // Initial state
                            }
                  render() {
                        return()
                      }

  Summary
    Class Components: Use JavaScript classes to create components.
    State: Managed internally, allows the component to be dynamic.
    Lifecycle Methods: Offer hooks into different phases of the component's life.
    Event Handlers: Methods within the class can handle events and update state.
    Class components provide a powerful way to build dynamic and stateful components in React.
    However, with the introduction of hooks, functional components are often preferred for their simplicity and ease of   use.

6.  Refs provide a way to access DOM nodes or React elements created in the render method.
      They should be avoided in most cases, however, they can be useful when we need direct access to the DOM element 
       or an  instance of a component.

**There are a few good use cases for refs:
  -  Managing focus, text selection, or media playback.

  -  Triggering imperative animations.

  -  Integrating with third-party DOM libraries.

    Refs are created using React.createRef() and attached to React elements via the ref attribute. 
    Refs are commonly assigned to an instance property when a component is constructed so they can be referenced       throughout the component.

7. What is Context API in ReactJS?
      React Context API is a part of the React library that allows you to pass data down the component tree without explicitly passing the props through every level.
     	It provides a way to share data between components, even if they are not directly related or nested in each other.
 ---Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. Using context, we can avoid passing 
   props through intermediate elements.
*** Use React Context API:
  	1. Small to medium-sized applications

			2. Fewer levels of data sharing

			3. Component-specific state:

8. Destructuring in JavaScript is a convenient way of extracting multiple values from arrays or objects and assigning them to variables. This feature makes your code cleaner and more readable by allowing you to unpack values directly from data structures.

9.We use Babel with React to transpile the JSX code into simple React functions that can be understood by browsers.
  1. Transpiling JSX:
  React uses JSX, a syntax extension that allows you to write HTML-like code within JavaScript.
  Browsers cannot understand JSX directly, so Babel transpiles it into regular JavaScript functions that the browser can interpret.
  For example, the JSX code <div>Hello</div> is transformed into React.createElement('div', null, 'Hello').

10.In React, higher-order functions (HOFs) are often used to create higher-order components (HOCs).
    An HOC is a function that takes a component and returns a new component with additional props or functionality. 
    This pattern is useful for code reuse, logic, and behavior across multiple components.
  ** Example withLoader
import React from 'react';

  // This is the higher-order component
    function withLoading(Component) {
     return function WithLoadingComponent({ isLoading, ...props }) {
    if (!isLoading) return <Component {...props} />;
    return <div>Loading...</div>;
   };
   }
   export default withLoading;
*****
   In React, Higher-Order Components (HOCs) are not built-in components provided by React itself but rather a design pattern used to create reusable components. 
   However, there are several well-known HOCs that are widely used in the React ecosystem, especially in conjunction with libraries like React Router, Redux, and others.
   Here are some common HOCs that you might encounter:
  real time  example withRouter

11.Redux
 Redux is a popular JavaScript library commonly used with React for managing state in applications. 
 It follows a predictable state container pattern and provides a centralised store to hold the application state.
  
****Here are some advantages of using Redux:
				Centralized state management: Redux provides a centralised location for storing the state of an application, which makes it easier to manage and debug.
				Predictable state updates: Since the state of an application can only be updated through actions and reducers, the state changes become predictable and easy to reason about.
				Time-travel debugging: Redux allows you to trace the state of an application at any point in time, which makes debugging easier

   when to use
  ---Use Redux:
		1. Large and complex applications

		2. Deeply nested components

		3. Asynchronous data flow


12. Reconciliation in React is the process of efficiently updating the actual DOM (Document Object Model) when the state or props of a component change.
			Here's how it works:
		1. Virtual DOM (VDOM):
					React maintains a lightweight representation of the actual DOM in memory, known as the Virtual DOM. When you change the state or props of a component, React updates the Virtual DOM first.
		2. Diffing Algorithm:
			 React then runs a diffing algorithm that compares the new Virtual DOM with the previous one. This algorithm identifies the specific changes that need to be made to the actual DOM.

13. Flux is a design pattern and architecture for managing application state and data flow in a predictable way. It was introduced by Facebook alongside React to address the complexity of managing state in large-
 		scale applications. Flux helps to ensure that data flows in a single direction, making the application easier to understand and debug.
 *** Advantages of Flux
			Predictable State Management: With a single source of truth, the state is predictable and easier to manage.
			Unidirectional Data Flow: Data flows in one direction, reducing the complexity of data handling.
			Separation of Concerns: Different parts of the application (actions, dispatcher, stores, views) have well-defined roles.

14.Comparison with Redux
					Redux is a state management library that follows the Flux architecture but simplifies it further. Key differences include:

			Single Store: Redux uses a single store instead of multiple stores.
			Pure Functions: Redux relies on pure functions called reducers to update the state.
			Middleware: Redux introduces middleware for handling side effects like asynchronous actions
15.
				***Benefits of Synthetic Events
			Consistency: Provides a consistent event system across all browsers.
			Performance: Event pooling reduces memory usage and improves performance.
			Convenience: Simplifies event handling by abstracting away browser-specific quirks.
In summary, Synthetic Events in React provide a consistent, performant, and convenient way to handle events across different browsers, making it easier for developers to write cross-browser compatible code.


16. How to optimize react app performance
Here are key performance optimization strategies for React applications:

1.Use React.memo: Memoize functional components to prevent unnecessary re-renders.

2.Use PureComponent: Extend React.PureComponent for class components to automatically perform a shallow comparison on props and state.

3.Code Splitting: Implement code splitting using React.lazy and Suspense to load components only when needed.

4.Avoid Inline Functions and Objects: Define functions and objects outside the render method to avoid re-creating them on every render.

5.Use useCallback and useMemo: Memoize functions and complex calculations to avoid unnecessary recalculations.

6.Debounce or Throttle User Inputs: Implement debouncing or throttling for functions triggered by user inputs, such as search or resizing events.

7.Efficient State Management: Avoid unnecessary re-renders by using local component state wisely and minimizing global state changes.

8.Lazy Loading Images and Components: Load images and components lazily to reduce the initial load time.

9.Use Production Build: Always deploy the production build of React to ensure optimizations like minification and dead code elimination.

10.Optimized Asset Loading: Use tools like Webpack to optimize asset loading (e.g., bundling, minification).

10.Optimize Rendering Logic: Break down complex components into smaller, manageable ones to isolate rendering logic.

11.Avoid Deeply Nested Components: Refactor deeply nested components to improve readability and performance.

12.Use Error Boundaries: Implement error boundaries to catch and handle exceptions, preventing crashes.

Profile and Monitor Performance: Regularly use React DevTools Profiler and other monitoring tools to identify and fix performance bottlenecks.

